# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from imagex.api.rpc.ui import ui_pb2 as ui__pb2


class UIStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Ping = channel.unary_unary(
                '/UI/Ping',
                request_serializer=ui__pb2.Empty.SerializeToString,
                response_deserializer=ui__pb2.SuccessReply.FromString,
                )
        self.ImageUpdate = channel.unary_unary(
                '/UI/ImageUpdate',
                request_serializer=ui__pb2.ImageUpdateRequest.SerializeToString,
                response_deserializer=ui__pb2.SuccessReply.FromString,
                )
        self.Exit = channel.unary_unary(
                '/UI/Exit',
                request_serializer=ui__pb2.Empty.SerializeToString,
                response_deserializer=ui__pb2.Empty.FromString,
                )


class UIServicer(object):
    """The service definition.
    """

    def Ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImageUpdate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Exit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=ui__pb2.Empty.FromString,
                    response_serializer=ui__pb2.SuccessReply.SerializeToString,
            ),
            'ImageUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.ImageUpdate,
                    request_deserializer=ui__pb2.ImageUpdateRequest.FromString,
                    response_serializer=ui__pb2.SuccessReply.SerializeToString,
            ),
            'Exit': grpc.unary_unary_rpc_method_handler(
                    servicer.Exit,
                    request_deserializer=ui__pb2.Empty.FromString,
                    response_serializer=ui__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UI(object):
    """The service definition.
    """

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UI/Ping',
            ui__pb2.Empty.SerializeToString,
            ui__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImageUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UI/ImageUpdate',
            ui__pb2.ImageUpdateRequest.SerializeToString,
            ui__pb2.SuccessReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Exit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UI/Exit',
            ui__pb2.Empty.SerializeToString,
            ui__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
